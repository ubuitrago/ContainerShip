import React, { useState } from 'react';

interface SecurityVulnerabilityDisplayProps {
  dockerfileContent: string;
  baseImage?: string;
  packages?: string[];
}

const SecurityVulnerabilityDisplay: React.FC<SecurityVulnerabilityDisplayProps> = ({
  dockerfileContent,
  baseImage = '',
  packages = []
}) => {
  const [vulnerabilityReport, setVulnerabilityReport] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [isExpanded, setIsExpanded] = useState<boolean>(false);

  const searchVulnerabilities = async () => {
    if (!dockerfileContent.trim()) {
      setError('Please provide Dockerfile content to analyze');
      return;
    }

    setLoading(true);
    setError('');
    setVulnerabilityReport('');

    try {
      // Extract base image from dockerfile if not provided
      let imageToCheck = baseImage;
      if (!imageToCheck && dockerfileContent) {
        const fromMatch = dockerfileContent.match(/FROM\s+([^\s\n]+)/i);
        imageToCheck = fromMatch ? fromMatch[1] : '';
      }

      // Extract packages from dockerfile if not provided
      let packagesToCheck = packages;
      if (packagesToCheck.length === 0 && dockerfileContent) {
        const packageMatches = dockerfileContent.match(/(?:apt-get install|apt install|yum install|dnf install|pip install|npm install)[^&\n]*?(\w+(?:-\w+)*)/g);
        if (packageMatches) {
          packagesToCheck = packageMatches.slice(0, 5); // Limit to first 5 packages
        }
      }

      const response = await fetch('http://localhost:8000/security/vulnerabilities/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          base_image: imageToCheck,
          packages: packagesToCheck.join(', ')
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.vulnerability_report) {
        setVulnerabilityReport(data.vulnerability_report);
        setIsExpanded(true);
      } else if (data.error) {
        throw new Error(data.error);
      } else {
        throw new Error('Invalid response format from server');
      }
    } catch (err) {
      setError(`Failed to fetch vulnerability information: ${err instanceof Error ? err.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };

  const formatReport = (report: string) => {
    // Convert markdown-style headers to HTML
    return report
      .replace(/^### (.*$)/gim, '<h4 style="color: #dc3545; margin: 1rem 0 0.5rem 0; font-size: 1rem;">$1</h4>')
      .replace(/^## (.*$)/gim, '<h3 style="color: #495057; margin: 1.5rem 0 0.75rem 0; font-size: 1.1rem;">$1</h3>')
      .replace(/^\*\*(.*?)\*\*:/gim, '<strong style="color: #007bff;">$1:</strong>')
      .replace(/\n/g, '<br/>');
  };

  return (
    <div style={{
      backgroundColor: '#fff3cd',
      border: '1px solid #ffeaa7',
      borderRadius: '8px',
      padding: '1rem',
      marginBottom: '1rem'
    }}>
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        marginBottom: '1rem'
      }}>
        <h3 style={{
          margin: 0,
          color: '#856404',
          fontSize: '1.1rem',
          display: 'flex',
          alignItems: 'center',
          gap: '0.5rem'
        }}>
          🔒 Security Vulnerability Check
        </h3>
        <button
          onClick={searchVulnerabilities}
          disabled={loading || !dockerfileContent.trim()}
          style={{
            backgroundColor: loading ? '#6c757d' : '#ffc107',
            color: loading ? '#fff' : '#212529',
            border: 'none',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer',
            fontSize: '0.9rem',
            fontWeight: 'bold',
            transition: 'background-color 0.2s'
          }}
          onMouseEnter={(e) => {
            if (!loading && dockerfileContent.trim()) {
              e.currentTarget.style.backgroundColor = '#e0a800';
            }
          }}
          onMouseLeave={(e) => {
            if (!loading) {
              e.currentTarget.style.backgroundColor = '#ffc107';
            }
          }}
        >
          {loading ? '🔍 Scanning...' : '🔍 Check Vulnerabilities'}
        </button>
      </div>

      {error && (
        <div style={{
          backgroundColor: '#f8d7da',
          color: '#721c24',
          padding: '0.75rem',
          borderRadius: '4px',
          marginBottom: '1rem',
          border: '1px solid #f5c6cb'
        }}>
          ⚠️ {error}
        </div>
      )}

      {loading && (
        <div style={{
          textAlign: 'center',
          padding: '2rem',
          color: '#856404'
        }}>
          <div style={{ marginBottom: '0.5rem' }}>🔍 Searching for security vulnerabilities...</div>
          <div style={{ fontSize: '0.9rem', opacity: 0.8 }}>
            Checking latest security databases and threat intelligence
          </div>
        </div>
      )}

      {vulnerabilityReport && (
        <div>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            marginBottom: '0.5rem'
          }}>
            <span style={{ color: '#856404', fontWeight: 'bold' }}>
              Security Analysis Results
            </span>
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              style={{
                background: 'none',
                border: 'none',
                color: '#856404',
                cursor: 'pointer',
                fontSize: '0.9rem',
                textDecoration: 'underline'
              }}
            >
              {isExpanded ? 'Collapse' : 'Expand'}
            </button>
          </div>

          {isExpanded && (
            <div
              style={{
                backgroundColor: '#fff',
                border: '1px solid #dee2e6',
                borderRadius: '4px',
                padding: '1rem',
                maxHeight: '400px',
                overflowY: 'auto',
                fontSize: '0.9rem',
                lineHeight: '1.5'
              }}
              dangerouslySetInnerHTML={{
                __html: formatReport(vulnerabilityReport)
              }}
            />
          )}
        </div>
      )}

      {!vulnerabilityReport && !loading && !error && (
        <div style={{
          color: '#856404',
          fontSize: '0.9rem',
          opacity: 0.8,
          textAlign: 'center',
          padding: '1rem'
        }}>
          Click "Check Vulnerabilities" to scan your Dockerfile for security issues
        </div>
      )}
    </div>
  );
};

export default SecurityVulnerabilityDisplay;
